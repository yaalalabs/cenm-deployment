#!/usr/bin/env bash

set -ef -o pipefail

print_help () {
cat << EOF
Usage: ${0##*/} ...
    -h                          display help and exit
    -i|--idman  [name]          provide idman  kubernetes service name
    -n|--notary [name]          provide notary kubernetes service name
    -p|--prefix [prefix]        specify release prefix for all Helm charts
    -m|--mpv [version]          the minimum platform version for your network
    --ACCEPT_LICENSE [YES]      agree to the Licenses for Components deployed by the Bootstrapper.
    -a|--auto                   complete script without further prompts to the 
    -c|--cockroachdb            include cockroachdb cluster in the deployment
EOF
}

while [ $# -gt 0 ]
do
    case $1 in
        -h|-\?|--help)
            print_help
            exit
            ;;
        -n|--notary)
            notaryServiceName="${2}"
            shift
            shift
            ;;
        -i|--idman)
            idmanServiceName="${2}"
            shift
            shift
            ;;
        -p|--prefix)
            PrefixVar="${2}"
            shift
            shift
            ;;
        -m|--mpv)
          minimumPV="${2}"
          shift
          shift
          ;;
        -a|--auto)
            auto=True
            shift
            ;;
        -c|--cockroachdb)
            deployCockroachDBCluster=True
            shift
            ;;
        --ACCEPT_LICENSE)
          acceptLicense="${2}"
          shift
          shift
          ;;
        *)
            print_help
            exit
            ;;
    esac
done

if [ "${acceptLicense}" != "Y" ] && [ "${acceptLicense}" != "YES"  ]
then
cat <<- EOF
    CORDA ENTERPRISE NETWORK MANAGER â€“ SOFTWARE EVALUATION LICENSE AGREEMENT must be accepted before CORDA ENTERPRISE NETWORK MANAGER can start.
    CORDA ENTERPRISE NETWORK MANAGER may be used for evaluation purposes for 90 days pursuant to the Software Evaluation License Agreement.
    Any use beyond this (e.g. in production deployments) requires a commercial license. Please contact sales@r3.com for more information.

    The Software Evaluation License Agreement for this product can be viewed from https://www.r3.com/corda-enterprise-network-manager-evaluation-license
    You can accept the Software Evaluation License Agreement by setting the --ACCEPT_LICENSE flag to "Y", "--ACCEPT_LICENSE Y"
EOF
    exit 1
else
cat <<- EOF
    CORDA ENTERPRISE NETWORK MANAGER â€“ SOFTWARE EVALUATION LICENSE AGREEMENT has been accepted, CORDA ENTERPRISE NETWORK MANAGER will now continue.
    The Software Evaluation License Agreement for this product can be viewed from https://www.r3.com/corda-enterprise-network-manager-evaluation-license.
    A copy of the Software Evaluation License Agreement also exists within the /license directory in the container."
EOF
fi

releasePrefix=${PrefixVar:-cenm}

printf "\nYour current kubectl context:\n\n"
printf "kubectl config context: %s\n" "$(kubectl config current-context)"
printf "             namespace: %s\n" "$(kubectl config view --minify --output 'jsonpath={..namespace}')"
printf "   Helm release prefix: %s\n" "${releasePrefix}"
if [ -z "${auto}" ]
then
    printf "\nDo you want to continue ? (y/n) "
    read -r answer
    [[ "${answer}" != "y" ]] && {
        printf "\nPlease run these commands with correct parameters and start this script again:\n"
        printf "\tkubectl config use-context ...\n"
        exit;
    }
fi
announce () {
    printf "\n~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~    %s \n~~~~~~~~~~~~~~~~\n" "${1}"
}

# we will measure and display how long it took to bootstrap new environment
startTime=${SECONDS}

#
# The purpose of the very first steps below is to trigger public IP allocation for the Identity Manager Service and the Notary.
# PKI Tool needs to know public IP address of Identity Manager beforehand.
#

if [ -z "${minimumPV}" ]
then
    minimumPV=4
fi

if [ ${minimumPV} -gt 4 ]
then
    printf "[ERROR] No such Corda Platform version as %s\n\n" ${minimumPV}
    exit
fi

if [ -z "${idmanServiceName}" ]
then
    idmanServiceAllocate=true
    idmanServiceName="${releasePrefix}"-idman-ip
    announce "Triggering public IP allocation for Identity Manager"
    printf "COMMAND: helm install %s-idman-ip idman-ip --set prefix=%s\n\n" "${releasePrefix}" "${releasePrefix}"
    helm install "${releasePrefix}"-idman-ip idman-ip --set prefix="${releasePrefix}"
fi

if [ -z "${notaryServiceName}" ]
then
    notaryServiceAllocate=true
    notaryServiceName="${releasePrefix}"-notary-ip
    announce "Triggering public IP allocation for Notary"
    printf "COMMAND: helm install %s-notary-ip notary-ip --set prefix=%s\n\n" "${releasePrefix}" "${releasePrefix}"
    helm install "${releasePrefix}"-notary-ip notary-ip --set prefix="${releasePrefix}"
fi

# Run HSM helm chart first to give more time for IP allocation for Identity Manager above

announce "Triggering HSM image"
printf "COMMAND: helm install %s-hsm hsm --set prefix=%s\n\n" "${releasePrefix}" "${releasePrefix}"
helm install "${releasePrefix}"-hsm hsm --set prefix="${releasePrefix}"

if [ "${idmanServiceAllocate}" == "true" ]
then
    announce "Waiting until cloud provider has allocated public IP for Identity Manager (it may take a few minutes)"
    idmanStartTime=${SECONDS}
else
    announce "Checking public IP allocated for Identity Manager"
fi

while [ -z "${idmanPublicIP}" ]
do
    idmanPublicIP=$(kubectl get svc "${idmanServiceName}" -o jsonpath='{.status.loadBalancer.ingress[0].*}')
    # if idmanPublicIP has some value don't print anything on the screen
    if [ -z "${idmanPublicIP}" ]
    then
        printf "."
        sleep 5
    else
        printf "\nidmanPublicIP = %s\n" "${idmanPublicIP}"
    fi
done
# show elapsed time only if you allocated new IP
if [ -n "${idmanStartTime}" ]
then
    elapsedTime=$((SECONDS - idmanStartTime))
    printf "Public IP allocation elapsed time: %s seconds (~ %s minutes)\n\n" "$((elapsedTime))" "$((elapsedTime/60%60))"
fi


announce "Triggering PKI Tool"
printf "COMMAND: helm install %s-pki pki --set idmanPublicIP=%s --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${idmanPublicIP}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-pki pki --set idmanPublicIP="${idmanPublicIP}" --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}" --set hsm="${hsm}"

announce "Bootstrapping CENM Auth service"
printf "COMMAND: helm install %s-auth auth --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-auth auth --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}"

announce "Bootstrapping CENM Gateway service"
printf "COMMAND: helm install %s-gateway gateway --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-gateway gateway --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}"

announce "Bootstrapping CENM Zone service"
printf "COMMAND: helm install %s-zone zone --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-zone zone --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}"

announce "Bootstrapping CENM Signer service"
printf "COMMAND: helm install %s-signer signer --set idmanPublicIP=%s --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${idmanPublicIP}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-signer signer --set idmanPublicIP="${idmanPublicIP}" --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}" --set hsm="${hsm}"

announce "Bootstrapping CENM Identity Manager service"
printf "COMMAND: helm install %s-idman idman --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${releasePrefix}" "${acceptLicense}"
helm install "${releasePrefix}"-idman idman --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}"

if [ "${notaryServiceAllocate}" == "true" ]
then
    announce "Waiting until cloud provider has allocated public IP for Notary (it may take a few minutes)"
    notaryStartTime=${SECONDS}
else    
    announce "Checking public IP allocated for Notary"
fi    

while [ -z "${notaryPublicIP}" ]
do
    notaryPublicIP=$(kubectl get svc "${notaryServiceName}" -o jsonpath='{.status.loadBalancer.ingress[0].*}')
    # if notaryPublicIP has some value don't print anything on the screen
    if [ -z "${notaryPublicIP}" ]
    then
        printf "."
        sleep 5
    else
        printf "\nnotaryPublicIP = %s\n" "${notaryPublicIP}"
    fi
done
# show elapsed time only if you allocated new IP
if [ -n "${notaryStartTime}" ]
then
    elapsedTime=$((SECONDS - notaryStartTime))
    printf "Public IP allocation elapsed time: %s seconds (~ %s minutes)\n\n" "$((elapsedTime))" "$((elapsedTime/60%60))"
fi

if [ -z "${deployCockroachDBCluster}" ]
then
    announce "Bootstrapping CockroachDB cluster"
    printf "COMMAND: helm install %s-cockroachdb cockroachdb"
    helm install "${releasePrefix}"-cockroachdb cockroachdb

    while [ -z "${cockroachDBPublicIP}" ]
    do
        cockroachDBPublicIP=$(kubectl get svc "${releasePrefix}"-cockroachdb -o jsonpath='{.status.loadBalancer.ingress[0].*}')
        # if cockroachDBPublicIP has some value don't print anything on the screen
        if [ -z "${cockroachDBPublicIP}" ]
        then
            printf "."
            sleep 5
        else
            printf "\cockroachDBPublicIP = %s\n" "${cockroachDBPublicIP}"
        fi
    done
fi

announce "Bootstrapping Notary service"
printf "COMMAND: helm install %s-notary notary --set notaryPublicIP=%s --set prefix=%s --set mpv=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${notaryPublicIP}" "${releasePrefix}" "${minimumPV}" "${acceptLicense}"
helm install "${releasePrefix}"-notary notary --set notaryPublicIP="${notaryPublicIP}" --set prefix="${releasePrefix}" --set mpv="${minimumPV}" --set acceptLicense="${acceptLicense}"

announce "Bootstrapping CENM Network Map service"
printf "COMMAND: helm install %s-nmap nmap --set prefix=%s --set acceptLicense=%s\n\n" "${releasePrefix}" "${releasePrefix}" "${acceptLicense}" 
helm install "${releasePrefix}"-nmap nmap --set prefix="${releasePrefix}" --set acceptLicense="${acceptLicense}"

announce "Waiting until cloud provider has allocated public IP for CLI endpoint (it may take a few minutes)"
gatewayStartTime=${SECONDS}
while [ -z "${gatewayPublicIP}" ]
do
    gatewayPublicIP=$(kubectl get svc "${releasePrefix}"-gateway -o jsonpath='{.status.loadBalancer.ingress[0].*}')
    # if gatewayPublicIP has some value don't print anything on the screen
    if [ -z "${gatewayPublicIP}" ]
    then
        printf "."
        sleep 5
    else
        printf "\ngatewayPublicIP = %s\n" "${gatewayPublicIP}"
    fi
done

elapsedTime=$((SECONDS - gatewayStartTime))
printf "Public IP allocation elapsed time: %s seconds (~ %s minutes)\n\n" "$((elapsedTime))" "$((elapsedTime/60%60))"

announce "Waiting until cloud provider has allocated public IP for Network Map (it may take a few minutes)"
nmapStartTime=${SECONDS}
while [ -z "${nmapPublicIP}" ]
do
    nmapPublicIP=$(kubectl get svc "${releasePrefix}"-nmap -o jsonpath='{.status.loadBalancer.ingress[0].*}')
    # if notaryPublicIP has some value don't print anything on the screen
    if [ -z "${nmapPublicIP}" ]
    then
        printf "."
        sleep 5
    else
        printf "\nnmapPublicIP = %s\n" "${nmapPublicIP}"
    fi
done

elapsedTime=$((SECONDS - nmapStartTime))
printf "Public IP allocation elapsed time: %s seconds (~ %s minutes)\n\n" "$((elapsedTime))" "$((elapsedTime/60%60))"

elapsedTime=$((SECONDS - startTime))
printf "\n\nOverall elapsed time: %s seconds (~ %s minutes)\n\n" "${elapsedTime}" "$((elapsedTime/60%60))"

printf "\n\nPlease wait until all components have finished bootstrapping - use 'kubectl get pods -o wide' to monitor progress.\n"

./bootstrap.cenm.connections -p "${releasePrefix}"

printf "\n\nTo display the above data again run ./bootstrap.cenm.connections -p %s \n\n" "${releasePrefix}"
